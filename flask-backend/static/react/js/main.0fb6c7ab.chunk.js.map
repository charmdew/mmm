{"version":3,"sources":["Header.js","TotalChart.js","App.js","serviceWorker.js","index.js","chungA_2.png"],"names":["HeaderSection","styled","div","_templateObject","SearchSection","_templateObject2","SearchBar","input","_templateObject3","SearchButton","button","_templateObject4","Header","react_default","a","createElement","className","href","type","Component","AlbumCover","img","TotalChart_templateObject","Table","table","TotalChart_templateObject2","Th","th","TotalChart_templateObject3","Td","td","TotalChart_templateObject4","TheadTr","tr","_templateObject5","TbodyTr","_templateObject6","props","color","chungA_2","TotalChart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","i","acc","document","getElementsByClassName","length","addEventListener","classList","toggle","style","height","state","totalChart","img_src","_this2","fetch","then","res","json","setState","_this3","map","chart","n","key","src","alt","onClick","num","title","artist","album","hour","App","src_Header","src_TotalChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"js/main.0fb6c7ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderSection = styled.div `\r\n    width:100%;\r\n    height:100px;\r\n    /*padding:50px;*/\r\n    background-color: #ff6f61;\r\n`;\r\n\r\nconst SearchSection = styled.div `\r\n    position: relative;\r\n    left:50%;\r\n    transform: translateX(-50%);\r\n    margin-top:1%;\r\n    margin-bottom:1%;\r\n    width:30%;\r\n    border:2px solid #f2f2f2;\r\n    border-radius:100px;\r\n    background-color: #f2f2f2;\r\n`;\r\n\r\nconst SearchBar = styled.input `\r\n    border:none;\r\n    background-color: #f2f2f2;\r\n    padding:1% 25%;\r\n    margin-left:3%;\r\n    margin-top:-3%;\r\n`;\r\n\r\nconst SearchButton = styled.button `\r\n    background-color: #f2f2f2;\r\n    border: transparent;\r\n    margin-top:1%;\r\n`;\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <HeaderSection className = \"headerSection\">\r\n                    <div className=\"logo\"></div>\r\n                    <a href=\"\">Log In</a>\r\n                    <a href=\"\">Sign Up</a>\r\n                </HeaderSection>\r\n            \r\n                <SearchSection className =\"searchSection\">\r\n                    <SearchBar type=\"text\" className=\"search_bar\"/>\r\n                    <SearchButton type=\"button\" className =\"searchButton\">제출\r\n                    </SearchButton>\r\n                </SearchSection>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport chungA_2 from './chungA_2.png';\r\n//import { list } from 'postcss';\r\n\r\nconst AlbumCover = styled.img `\r\n    width: 100px;\r\n    height: 100px;\r\n`;\r\n\r\n\r\nconst Table = styled.table `\r\n    /*border : 1px solid black;*/\r\n    border-collapse: collapse;\r\n    text-align: center;\r\n    margin-left: auto; \r\n    margin-right: auto;\r\n    width : 70%;\r\n`;\r\n\r\nconst Th = styled.th `\r\n    padding: 8px;\r\n    text-align: center;\r\n    border-bottom: 1px solid #ddd;\r\n`;\r\n\r\nconst Td = styled.td `\r\n    padding: 8px;\r\n    text-align: center;\r\n    border-bottom: 1px solid #ddd;\r\n`;\r\n\r\nconst TheadTr = styled.tr `\r\n    width : 100%;\r\n    border: 2px solid #ffa9a1;\r\n    background-color: #ffdbd8;\r\n\r\n    border-left : 0px;\r\n    border-right  : 0px;\r\n`;\r\n\r\nconst TbodyTr = styled.tr `\r\n    width : 100%;\r\n    border: 2px solid #ffa9a1;\r\n    background-color: ${props => {\r\n        if (props.color % 2 === 0) return '#ffdbd8';\r\n    }};\r\n    border-left : 0px;\r\n    border-right  : 0px;\r\n    height : 100px;\r\n    transition: 0.2s ease-out;\r\n    background-image: url(${props => props.color===1 ? chungA_2 : \"\"});\r\n    background-repeat: no-repeat;\r\n    background-size: 100%;\r\n`;\r\n\r\nclass TotalChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            totalChart: [],\r\n            img_src: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        \r\n        fetch('http://127.0.0.1:5000/api/chart')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    totalChart: json\r\n                })\r\n            });\r\n    }\r\n\r\n    handleChange = () => {\r\n        var acc = document.getElementsByClassName(\"Row\");\r\n        var i;\r\n        \r\n        for (i = 0; i < acc.length; i++) {\r\n          acc[i].addEventListener(\"click\", function() {\r\n            this.classList.toggle(\"active\");\r\n            \r\n            if (this.style.height===\"100px\"){\r\n                this.style.height=\"200px\";\r\n            } else {\r\n                this.style.height=\"100px\";\r\n            } \r\n          });\r\n        }\r\n        \r\n      }\r\n\r\n    render() {\r\n\r\n        var { totalChart } = this.state; \r\n\r\n        return (\r\n            <div>\r\n                <Table>\r\n                    <thead>\r\n                        <TheadTr>\r\n                            <Th>순위</Th>\r\n                            <Th>점수</Th>\r\n                            <Th>앨범커버</Th>\r\n                            <Th>제목</Th>\r\n                            <Th>가수</Th>\r\n                            <Th>앨범</Th>\r\n                            <Th>시간</Th>\r\n                        </TheadTr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {totalChart.map(chart =>(\r\n                        <TbodyTr color={chart.n} key={chart.n}\r\n                        className=\"Row\"\r\n                        img={chungA_2} \r\n                        src={chungA_2} \r\n                        alt=\"chungA_2\" \r\n                        onClick={this.handleChange}>\r\n                            <Td>{chart.n}</Td>\r\n                            <Td>{chart.num}</Td>\r\n                            {/*{img_src.map(img=>(*/}\r\n                            <Td>{/*{list.album_cover}*/} \r\n                            <AlbumCover src={chart.img}\r\n                            className=\"album_cover\" alt=\"album_cover\"/></Td>\r\n                            <Td>{chart.title}</Td>\r\n                            <Td>{chart.artist}</Td>\r\n                            <Td>{chart.album}</Td>\r\n                            <Td>{chart.hour}</Td>\r\n                        </TbodyTr>\r\n                        ))};\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalChart;","import React, { Component } from 'react';\r\nimport  './App.css'; \r\nimport Header from './Header';\r\nimport './Header.css';\r\nimport TotalChart from './TotalChart';\r\nimport './TotalChart.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n      <Header/>\r\n      <TotalChart/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"media/chungA_2.a541f4b7.png\";"],"sourceRoot":""}